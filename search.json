[{"title":"攻防世界web进阶区unfinish详解","date":"2020-08-09T13:59:00.000Z","url":"/2020/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAunfinish%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 详解我们使用御剑，扫描一波 我们进入注册页面查看，发现这个，有注册的话猜一下二次注入（这里注入，然后去页面看结果） 我们先拿AWVS试试，哦~我的上帝，它存在注入我们试试，burp的fuzz看看他过滤了什么还是过滤了蛮多的这些是都没过滤的 既然知道了他是sql注入那么我们为啥不用sqlmap呢我们使用sqlmap，发现只能知道这里有注入点，但是过滤很严重我们需要找找合适的tamper哦~我的上帝，果然不行，看来还得看看师傅们怎么写的 我们推测这里的语句是 insert into tables value(&#39;$email&#39;,&#39;$username&#39;,&#39;$passwpord&#39;);登录成功后语句： SELECT * FROM tables WHERE email = &#39;&#39;$email&quot;;他这里注册的时候作了限制，所以联合查询这种方法不能用。 那么尝试在注册时用户名处进行闭合。 用户名处构造group_concat(1,database()),database&#39;,&#39;1&#39;)# 结果返回 nnnnoooo!!!有过滤， 被过滤就是这样子 用户名注册时加个单引号注册失败，双引号注册成功，说明可能为单引号闭合·， 注册一个。 email: 123@123.comusername: 1&#39; and &#39;0password: 123登陆发现，用户名处回显0 说明存在注入，and运算结果为0. 下面节选自 与其他编程语言不同，MySQL中，+(加号)只有一个功能：运算符。 如果加号运算中有字符，那么mysql就会把字符转变为数字在相加，比如select ‘1’+’1a’;结果为2，转换过程跟php类似。 下面看几个例子。 可以用截取的方法，截取处每一位，然后ascii编码。 成功截取，但是逗号被过滤，该咋办。使用from...for...代替。 还有可以使用十六进制转换后运算有疑问，为啥不用二进制或者八进制。用例子来说明： 可以看到，只有十六进制成功转换。但是又出来一个问题，如果十六进制转换后的字符串有字母的话，转化为数字就会相加就会丢失字符。 又但是当这个长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度。 这里还可以使用分段读法。 抄大佬的脚本 题目真的越来越难了，没有wp寸步难行唉，太菜了"},{"title":"攻防世界web进阶区ics-07详解","date":"2020-08-07T15:54:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAics-07%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目当然又是熟悉的界面，熟悉的ics题目，熟悉的只能点击一个页面 详解这里进来有一个view-source点击看看是一堆代码。我们进行尝试审计 page不能为空，同时，他的值不能等于index.php这样，就会包含flag.php文件否则重定向到flag.php这个文件 我们来看第二块儿判断session的是不是admin，然后获取到一些值，匹配.php3457,pht,phtml如果匹配到，那么就结束如果没有匹配到，那么就写入文件 这里判断id是否存在，floatval这里用的!==，所以类型也要比较，后变为字符串string，前面为数值float,所以肯定不相等。substr用来返回子串然后进行数据库的查询，并且进行了转义 第一段是个简单重定向，get参数page不为index.php即可 第二段 需要得到一个admin的session，之后可以post传入con与file两个参数File参数是自定义的文件名字，之后会处理为backup/文件名这里对文件名进行了过滤，防止后缀名是php的文件。上传成功后，会切换到uploaded目录，创建文件，并将con的内容写入，那么实际文件的路径就是：uploaded/backup/xxx.xxx 第三段代码是对get参数id进行校验，如果id的浮点数不是1，且最后一位是9那么，实行查询语句，如果查询正确，会得到一个admin的session 因此我们这里就需要满足所有需求我们查询id的时候，发现有了admin的session?page=flag.php&amp;id=1xx9这里因为只要他的最后一位是9即可进行绕过这里同时利用了php的弱类型相等，因此可以进行查询语句 我们就可以进行上传木马了因为他过滤很严格，我们只能进行解析漏洞00截断啊，之类的我们发现这里上传的并没有存进来，必须通过网页来上传，因为那里有者sessionapache2.x的解析漏洞1.php.xxx会被当作php来解析，那么我当时上传的时候，并没有能够成功，我们换另一种上传方式其中 .. 代表当前目录的父目录 , .代表当前目录，所以这里的c.php/b.php/..也就是访问b.php的父目录，也就是 c.php 但是我这里死活连不上，只能这样来表示可以了吧我们上传可以往父级目录上传，我估计他可能父级目录可以进行操作 floatval他只留下了数字 substr"},{"title":"攻防世界web进阶区bug详解","date":"2020-08-07T15:53:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAbug%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法我们直接打开就是一个页面，登录页面，当我们尝试注册的时候，发现，用户已经存在我们对他所有的页面都进行sqlmap的扫描，并没有发现可以注入的点因为他这里之前注册时候发现存在admin的账户，我们尝试一下，这里功能很多，那么我们试试直接修改admin的账户密码试试我们在他修改密码的地方，尝试修改名字发现成功，我们登录admin的账号试试 其实我们发现还是不能登录，只是名字改为了admin，并没有他的权限，最多有了他的信息我们尝试上一次使用的xff修改成功登录，说明他这里限制了本地ip查看源码，发现了隐藏语句直接访问肯定不可以，他说了，filemanage，我们猜测，这几个问号是什么无非就是change，upload，stastic，果然有upload可以进去开始我们的上传之路正常上传发现可以写入一句话，发现他认出了我们是php所以他开启了内容的检测文件头依旧不可以绕过我们放出大招，果然，文件内容可以进行绕过了，现在是文件后缀的绕过直到我们输入php4，发现终于可以绕过了 同时我们获得了flag"},{"title":"攻防世界web进阶区Cat详解","date":"2020-08-07T15:52:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BACat%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目但是我们输入一个链接的时候发现没有回显这是我们访问loli.club的页面我们输入ip地址，发现有回显 详解至此，我们猜测是一个代码执行的考点我们尝试127.0.0.1||ls127.0.0.1&amp;&amp;ls127.0.0.1|ls均被过滤 我们发现他的url处存在编码，url编码我们进行尝试发现，url编码为%80时报错，因为ASCII码的编码范围0-127%80相当于128 所以推断是由unicode解码失败导致的， 在比赛的时候有个提示： RTFM of PHP CURL===&gt;&gt;read the fuck manul of PHP CURL??? 我们可以看到，他是POST方式，同时有着Django的模板根据大佬的教学 可以使用at为前缀并使用完整路径我们根据django的目录，可以从配置文件settings.py的报错中看看有没有database的相关信息?url=@/opt/api/api/settings.py我们找到他是一个sqlite3数据库我们看看他的内容"},{"title":"攻防世界web进阶区ics-04详解","date":"2020-08-06T16:53:00.000Z","url":"/2020/08/07/ics-05/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["CTF","/tags/CTF/"],["WEB","/tags/WEB/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目打开环境，发现就一个登录和注册功能可以用。还有一个用户找回密码功能。 详解我们发现有三个入口注册，登录，找回密码我们使用sqlmap扫描，发现只有找回密码可以进行sql注入python2 sqlmap.py -r -batch --dbscert中只有一个表 user我们看他字段 登录成功获取flag当然，这是在可以获取到密码的情况 实际上我们并不能一定可以解决 那么我们可以进行重复注册我们尝试去覆盖他的原来的账号密码，发现也是可以登陆的"},{"title":"攻防世界web进阶区FlatScience详解","date":"2020-08-06T15:57:00.000Z","url":"/2020/08/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAFlatScience%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["CTF","/tags/CTF/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法我们一个一个点进去发现也就是一些论文之类的我们御剑发现了一些东西robots。txt我们登录试试在login页面有报错，我们猜测是sql注入他的源码中写到，登录是你不可能绕过的这里源码中出现了？debug，可能是一个调试页面，我们访问看看 判定POST提交的usr和pw是否存在，很显然usr处存在注入这里提醒是sqlite数据库 tips： 我们使用sqlmap进行尝试可见，存在注入但是并没有跑出来，可能是我的网速问题这里我们知道了他的数据库是sqlite那么我们进行手工注入1’ –+,不报错，说明闭合方式确定了。 1&#39; order by 3 --+报错，1&#39; order by 2 --+不报错，说明字段是2， 这里我们看到有回显了 我们查询到了他的数据库，发现有hint这个选项进去看看看这里查到，需要他的论文，我们查询一下其他的列 我们猜测，他的密码应该和pdf有关使用网上的脚本python3爬取多目标网页PDF文件并下载到指定目录： 得到admin的密码为ThinJerboa"},{"title":"攻防世界web进阶区ics-05","date":"2020-08-06T09:17:00.000Z","url":"/2020/08/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAics-05/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目我们只能点击一个地方 解法御剑扫描有一个css的文件没有什么作用发现又点了一次的时候，url发生了改变 因为是php的页面，我们试试php伪协议读取文件 这是我们解密出来的文件内容发现了一个输入的函数他如果是字母和数字组合的话，输出page内容，同时die掉如果不是字母和数字的组合的话，走如下的elsepage中不能存在input，ta：text，text，而且不能是在page的开头处存在，否则就die掉如果page中包含index。php,那就输出ok，然后包含page这个文件 最后还有一个内部人员的测试版本，如果要从内部访问的话，其实本地的命令执行就可以进行使用这个函数首先伪造xff pattern，replacement，subject，同时有值的话preg_replace，搜索subject中 pattern的字符串，同时替换为replacement 也就是说pattern参数的结尾包含了/e修正符的话,如果replacement构成合法的代码的话便会执行 我们使用插件，成功的模拟了本地访问我们来一波Rce要注意字符串两个相匹配?pat=/heihei/e&amp;rep=system(&#39;ls /var/www/html&#39;)&amp;sub=heihei我们使用一下find命令?pat=/heihei/e&amp;rep=system(&#39;find -name *flag*&#39;)&amp;sub=heihei preg_replace ctype_alnum strpos查询某个字符串在某个字符串中第一次出现的位置 X-Forwarded-ForIP伪造 TCP/IP层面的IP伪造很难实现，因为更改后很难实现正常的TCP通信，但在HTTP层面的伪造就显得很容易。可以通过伪造XFF头进行IP伪造 XFF字段 X-Forwarded-For(XFF)是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。通俗来说，就是浏览器访问网站的IP。一般格式： X-Forwarded-For: client1, proxy1, proxy2, proxy3左边第一个是浏览器IP，依次往右为第一个代理服务器IP,第二个，第三个（使用逗号+空格进行分割） 伪造方式 可以通过专门的抓包改包工具或者浏览器插件或者使用脚本语言构造headers参数使用X-Fordward-For 火狐插件即可"},{"title":"xss-labs详解（下）11-20","date":"2020-08-04T16:39:00.000Z","url":"/2020/08/05/xss-labs%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%8911-20/","tags":[["XSS-Labs","/tags/XSS-Labs/"]],"categories":[["XSS-Labs","/categories/XSS-Labs/"]],"content":"Level 11查看一波源代码，发现可能在这里存在xss那么我们使用burp抓包,修改 果不其然他是把上一关的链接加上了 Level 12我们先看一下源代码这次他的值明显就是useragent的内容了 这个$_SERVER[‘HTTP_USER_AGENT’]就是来获取的 Level 13看源代码觉得和10关很相似，我们全部自己构造参数试试构造普通一句话只有这里有回显第一个是refer第二个是useragant猜测这个就是cookie的xss了 Level 14 我们查询一下，需要访问这个网页，我们使用某种不存在的东西，访问一下可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。 将XSS写到Exif里（PowerExif）exif是PHP拓展，如果要用exif_read_data函数要记得开启拓展。这是使用demo ==linux系统使用exiftool工具，进行修改。windows系统直接使用鼠标右键进入属性页面直接修改。==在配置文件php.ini中找到php_exif.dll将其加载顺序替换到php_mbstring.dll的后面，重启Apache打开页面进行读取，弹窗成功这个网站可以修改 Level 15 被墙了我们换一个 ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。 可以看到我们提交的参数src的值被插入到了标签的class属性值中，但是前面还有ng-include这样的字符。 ng-include是angular js中的东西，其作用相当于php的include函数。这里就是将1.png这个文件给包含进来我们这么构造 就相当于访问了一次level1，同时让1执行了xss ng-include1.ng-include,如果单纯指定地址，必须要加引号2.ng-include,加载外部html，script标签中的内容不执行3.ng-include,加载外部html中含有style标签样式可以识别 1，ng-include指令用于包含外部的HTML文件。 2，包含的内容将作为指定元素的子节点。 3，ng-include属性的值可以是一个表达式，返回一个文件名。 4，某种情况下，包含的文件需要包含在同一个域名下。 onerror Level 16经典一句话，基本都被过滤了，发现scrip和/被编码为&amp;nbsp;因为这里把空格都编码了，也就意味着我们无法通过空间来将字符分隔进行语义的区分，不过我们还可以用回车来将它们分开。而且这里将/符号也编码了，所以我们需要的是一个不需要封闭的标签，在一开始之前用过的 可以用回车的URL编码格式％0a来表示。当然％0d也可以。 可以看到关键字script以及/符号，空格都被替换成相同的空间字符实体了。这样也没办法去封闭前面的标签了。 Level 17 他有两个参数，我们都来一句话看看发现过滤了括号他这里提示了xsf，是一个flash攻击它本身的src并没有引号，所以我们直接输入即可火狐没有flash，我们来chrome但是谷歌把xss防住了 直接使用onclick或者onmouseover即可 Level 1818关同17关 Level 19因为chrome和fire都不让flash运行，我们只能打开iesrc的值使用双引号括起来的这里有师傅的具体操作 href=&quot;javascript:alert(/xss/)&quot;&gt;xss&lt;/a&gt; Level 20level20 仍然是flash的xss一片空白的20关师傅的博客 这关确实没思路了可以试试flash xss扫描工具"},{"title":"攻防世界web进阶区web2详解","date":"2020-08-04T10:57:00.000Z","url":"/2020/08/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAweb2%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法 我们这里来审计一波for循环，从0到循环到字符串长度从$_o开始之后$_0长度的字符开始寻找，长度为1的输出给了$_c php脚本如下 strrev函数反转字符串 substr从第六位开始，返回之后的值 ord返回第一个字母的ASCII chr()从指定的ascii值返回字符4的十进制ascii是52 str_rot13()一种编码解码函数对字符串执行 ROT13 转换,ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。"},{"title":"xss-labs详解(上)1-10","date":"2020-08-03T02:26:00.000Z","url":"/2020/08/03/first-post/","categories":[["XSS-Labs","/categories/XSS-Labs/"]],"content":"Level 1源码 最基本的，我们直接插入语句&lt;script&gt;alert(1)&lt;/script&gt; Level 2 这些被预编译了这里我们看到还有一个submit，他是input的弹窗，我们在这里进行闭合 源码也可以看到，input的标签，并没有过滤，&quot;&gt; &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; //我们闭合前面， 注释后面，完成！ htmlspecialchars把预定义的字符 “&lt;” （小于）和 “&gt;” （大于）转换为 HTML 实体：实体化函数，也是一种预编译的函数，相当于&lt;&gt;不起作用了 Level 3 正常输入并不可以，我们进行代码审计使用了两次 htmlspecialchars而我们的htmlspecialchars 默认不对&#39;生效正好这里的value是&#39;闭合的我们看到这儿，value也闭合了，onlick也闭合了，只要点击value空白处，就能触发&#39; onclick=&#39;javascript:alert(/xss/)&#39;onclick=&#39;alert(/xss/) &#39; onmouseover=&#39;javascript:alert(/xss/)&#39;onmouseover=&#39;alert(/xss/)这两个都可以 JavaScript伪协议伪协议不同于因特网上所真实存在的协议，如http://，https://，ftp://， 而是为关联应用程序而使用的.如:tencent://(关联QQ)，data:(用base64编码来在浏览器端输出二进制文件)，还有就是javascript: 我们可以在浏览地址栏里输入”javascript:alert(‘JS!’);”，点转到后会发现，实际上是把javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面。 Level 4 他这里只是把尖括号替换为了空我们上我们的经典语句发现了转义，他把尖括号转义了但是这里并没有进行过滤我们直接构造闭合value即可 Level 5一套经典操作过后，发现，单引号没有被转义发现第一个script被过滤了一点那么我们再试试onclick发现onclick也是那么我们只能把input的标签闭合，然后在定义新的一个没有on的语句&quot;&gt; &lt;a href=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt; 我们来查看一下源代码将script和on都替换了 Level 6同样一套灌下去，发现单引号并没有，然后script被过滤了我们使用第五关的代码，发现href也被过滤了因为str_replace是区分大小写的那么我们把script或者href大写区分一下就好了 查看一下源码，他增添了几个过滤 Level 7经典语句之后，发现，被置为了空，那么我们双写绕过发现可以，那么我们闭合之前的括号即可&quot;&gt;&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt; Level 8标准一把梭，发现增加了友情链接发现被禁了，同时将script给过滤了我们测试又发现，onclick和jaavascript过滤了基本都被过滤了，那么我们试试实体化编码绕过就是将他编译过后的在存储进去，那么我们最终显示出来的就是我们需要的代码可以看看这里的解释这里我们将他实体化，这是在线网站：(1) strtolower将所有变为小写，防止大小写绕过 Level 9经典一句话，发现他说不合法，那么猜一手匹配相应字符哦~第八关的实体化代码输入不进去那么我们猜一猜匹配的字符是什么网址的话猜一下http://发现我们的链接存在了，那么我们将上一关的代码补上注意一定要将他http：//注释掉 看代码，果然是匹配了http:// Level 10第十个，打开只有一张图片，那么猜一下应该是从图片入手看源代码，发现了三个隐藏的input框我们把他隐藏的hidden删掉没有发送按键，那只能在hackbar直接构造了我们把所有的参数都改成我们的一句话，冲冲冲！我们发现只有第三个有回显，和之前的很像，而且她过滤了括号我们猜测使用javascript伪协议 实体化也没能绕过说明他源代码并没有进行实体化，那么我们考虑考虑直接xss发现也不可以，我们把type删掉，然后点击空白框即可&amp;t_sort=&quot; onclick= &quot;alert(/xss/) 将尖括号屏蔽了，其他没有什么，"}]