[{"title":"0ctf_2016 _Web_unserialize","date":"2020-09-05T04:31:00.000Z","url":"/2020/09/05/0ctf-2016-Web-unserialize/","tags":[["CTF","/tags/CTF/"]],"categories":[["CTF","/categories/CTF/"]],"content":"0x01拿到题目第一件事是进行目录扫描，看看都有哪些目录，结果如下： 不少，首先有源码，我们直接下载下来，因为有源码去分析比什么都没有更容易分析出漏洞所在。 通过这个知道，它一共有这么几个页面，首页登录页面，注册页面，update更改信息页面，这几个页面是我们能够直接接触到的，那想必flag应该在另外几个页面中，稍后我们分析。先来看看网站页面都是什么样子。 登陆页面 注册随便注册一个登录进去index.php 这个无非就是登录页面，输入账号和密码，如果正确，那就跳转到profile.php页面，就是显示你个人信息的页面 register.php 注册页面，没有可疑地方 update.php 更改信息页面，将输入的信息传入相应参数，且需要满足一定的正则过滤规则， profile.php 看到这里的代码的时候突然眼前一亮，反序列化，做题做多了，对这个就很敏感，而且profile页面的数据是接受来自update，即我们修改信息的那个页面，光有这个不行，真正引起我注意的这段代码 因为flag一般在一个文件中，要想知道flag，一般需要读取，有文件读取功能的函数file_get_contents（）引起了我的注意，我就想，会不会是这个地方能够读取到flag呢？到这里我们想起还有两个源码我们没有看，是class.php和config.php 这段代码是核心代码，因为要从数据库查数据需要用到这段代码中的函数和规则，既然查数据要用到，那查flag肯定也要用到啊，那谁调用class呢？看代码开头，是config.php 到这里，思路基本已经有了，就是我们需要读取config.php来获取flag，如何读取呢？ 0x03到这里，我又想了想题目有哪些提示，对，就是标题，反序列化，那也就是说，序列化是我们一定要用到的，哪里出现了呢？在profile.php中出现了。我们通过源码看到profile通过update.php经过POST传入phone，email，nickname，photo四个参数，而其中的photo参数具有文件读取的函数功能，所以我们直接让它读取config.php文件即可获得flag 正常来说我们的序列化payload如下 由于变量进行了替换，那么替换后长度肯定会发生改变，在nickname之后的字符长度一共是34，那么我们完全可以用34个where来让它进行正则匹配替换，然后剩下的34个字符就不会被正则匹配，即下面代码，在反序列化时就会被成功当成photo，那么我们就可以成功读取到config.php了 经过以上分析，写出如下序列化代码： base编码后得出flag"},{"title":"攻防世界web进阶区Web_python_block_chain详解","date":"2020-08-19T16:00:00.000Z","url":"/2020/08/20/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAWeb-python-block-chain%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"],["区块链","/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 详解我们整理一下 访问/source_code,得到源码： 从这里访问一个美化页面 我们访问以后，有一个python的源码 List item 题目描述 51% 双花攻击 这道题整的解法是 51% （双花）攻击。 请于正常的区块链区分开来，题目环境中只有你一个玩家，并没有人与你竞争（挖矿）。 商店交易采用0确认，而不是现实中的6确认。 当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链。 区块链允许添加空块51%（双花）攻击可以达到的目的就是使攻击前的交易作废，这里的前不一定是前一个，而是很大程度上取决于你的算力的。让之前的交易作废有什么好处呢？这里我们就要考虑0确认和6确认的区别了。 先看看6确认： 当产生一笔交易时，区块链的P2P网络会广播这笔交易，这笔交易会被一个挖矿节点收到，并验证，如果这个挖矿节点挖到区块（生成的hash满足条件）后，并且这笔交易的手续费足够吸引这个节点去打包进区块，那这笔交易就会被打包进区块。因此就得到了一个确认，这个矿工也拿走了相应的手续费。 这个挖矿节点打包后，会把区块广播给其他节点。其他节点验证并广播这个区块。 如果这个区块得到更多的挖矿节点的验证确认，那就得到了更多的确认。这样这笔交易就被记录到了比特币区块链，并成为了比特币账本的一部分。如果得到6个确认后，我们就认为它永远不可变了。 0确认就同样的道理了，那就是不需要别人确认，就如我们生活中的一手交钱一手交货，不同的是生活中我们处于中心化社会，银行会帮我们确认。而6确认就是需要经过6个人(区块被挖出)交易才确定。 可以看到对0确认和6确认进行51%(双花)攻击的难度是不一样的，6确认需要的算力明显要大，因为他要多比其他人生成6个区块。（应该可以这样理解吧，可能我还需要继续学习，如上，如有不对可以联系我(jay80#protonmail.com)改正，在这也谢谢各位大佬了。）好在，题目并不是采用6确认。 然后再看看这里的51% 攻击，其实这里说的51%是指算力，也就是这种攻击需要攻击者具备全网51%的算力，因为这样才有机会使自己生成（挖出）区块的速度超过其他人，然后按区块链的规则：当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链，就达到了撤销原来链上已经存在的交易，拿回该交易使用了的钱的目的，这里我的另一个理解就是可以使交易回滚，从而追回被盗的钱。 对攻击的原理有了简单的理解后，我们就来看看这道题从原理上应该怎么做。先放两张自己画的图： 实际构造 原理上明白了以后，我们就开始从代码上进行实际攻击。首先我们先看一下一个标准的区块是咋样的，下面其实就是黑客盗取银行的区块： 按照流程，我们应该构造一个转钱给商店的区块。但通过代码，我们可以发现转账的时候是需要私钥签名的，也就是这个signature段。 做题的时候也卡着这，想着是不是能拿到银行的私钥。但通过看writeup发现，这些信息我们可以通过黑客留下的signature直接绕过，并且上一步的input也可以从黑客的区块中得到。所以我们就可以直接构造转账给商店的区块了，并且通过51%攻击使黑客转走的钱追回。 下面直接放出完整的payload脚本，需要特别提醒的是要注意每个区块的prev。 运行后会得到5个区块，然后依次post就可以得到flag post第三块的时候会得到一个钻石。post第5块的时候会得到第二个钻石。 然后访问/flag，从而得到flag。我们还可以使用py2脚本 需要我们更改一下ip和3个addr 参考链接：   "},{"title":"攻防世界web进阶区wtf.sh-150详解","date":"2020-08-19T13:58:00.000Z","url":"/2020/08/19/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAwtf-sh-150%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目看起来像一个论坛，可以注册，登录 详解我们随便打开一个尝试注入并没有发现可以注入注册发现，admin已经存在，我们看看能不能二次注入看来也不行正常登录试试看看有没有其他漏洞我们发送的时候，看到有个参数，我们试试目录穿越使用../ 发现了源码泄露发现有一个flag那么我们代码审计 这里写的，如果我们登录时cookies是admin同时username=admin我们即可获得flag 我们看到有一些user同时他是users的目录我们试试users看看能不能进行读取 果然发现了加密信息之类的，我们怀疑他是token果然他给我们赋值了，我们正常发东西即可，修改cookie即可在返回包中因为有set cookie所以我们直接修改我们在profile处找到了前半个flag我们继续分析之前泄露的源码因为整个网站都是wtf的文件，所以我们看看 这里有一个replay功能 这行代码把用户名写在了评论文件的内容中： flag2太难搞了，我们只能抄师傅们作业了 如果用户名是一段可执行代码，而且写入的文件是 wtf 格式的，那么这个文件就能够执行我们想要的代码。 （而且wtf.sh只运行文件扩展名为.wtf的脚本和前缀为’$’的行） $&#123;find,/,-iname,get_flag2&#125;这里前面加个$是wtf文件执行命令的写法find 所有目录下 不分大小写， get_flag2的名字的文件 我们首先上传这样一个wtf文件然后我们进行访问 %09是水平制表符，必须添加，不然后台会把我们的后门当做目录去解析。获得 flag2 所在的路径。 继续构造用户名为恶意代码。$/usr/bin/get_flag2 写入后门： 访问后门，得到Flag: 149e5ec49d3c29ca} ļv’ RE: hello 拼接得到xctf{cb49256d1ab48803149e5ec49d3c29ca}"},{"title":"攻防世界web进阶区blgdel详解","date":"2020-08-19T13:58:00.000Z","url":"/2020/08/19/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAblgdel%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 详解我们发现他有个robots.txt文件我注册了好几次，也没登录成功，挺离谱直接访问，发现是源码 xctf环境无法登录，此题先更到这里我们可以先代码审计，环境好了再写在结合我们刚开始找的源代码，就是上传文件的操作。 parse_str() 函数把查询字符串解析到变量中。代码审计， 定义了一个类master，其中有几个方法，我们逐个分析。 stream_open()对path的传参和name的传参从字符串到变量，做了一个方法对应。 upload()过滤了文件内容。 发现&lt; “ ‘ . 文件内容都被替换成了!. /file:|http|pre|etc/is也被过滤了。 search()判断了是否存在path路径，对当前目录进行遍历，存在和path路径，对当前目录进行遍历，存在和name相同的文件或者目录替换为空 并列出当前目录。 但是我们可以上传.htaccess文件，但是平常遇到的文件内容都会触发过滤，所以得想想绕过文件内容检测。 御剑有了消息有一个sql.txt 正则 \\s是指空白，包括空格、换行、tab缩进等所有的空白$是从后匹配字符串/是为了匹配 /() 是为了提取匹配的字符串。表达式中有几个()就有几个相应的匹配字符串。. 表示 匹配除换行符 \\n 之外的任何单字符，*表示零次或多次 所以.*在一起就表示任意字符出现零次或多次。没有?表示贪婪模式。比如a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。 php_value见这里"},{"title":"sql注入之万能密码总结","date":"2020-08-19T13:57:00.000Z","url":"/2020/08/19/sql%E6%B3%A8%E5%85%A5%E4%B9%8B%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81%E6%80%BB%E7%BB%93/","tags":[["渗透测试","/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"],["sql注入","/tags/sql%E6%B3%A8%E5%85%A5/"],["万能密码","/tags/%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81/"]],"categories":[["sql注入","/categories/sql%E6%B3%A8%E5%85%A5/"]],"content":"万能密码啊这，一般用来ctf登录的时候试试，这是sqli-labs用的时候，我来记录一下 万能密码原理 原验证登陆语句: 输入 1′ or 1=1 or ‘1’=’1万能密码语句变为: 即得到优先级关系：or&lt;and&lt;not，同一优先级默认从左往右计算。 (1.)上面’1’=’1’ AND Password=’EDFKGMZDFSDFDSFRRQWERRFGGG’先计算肯定返回false,因为密码是我们乱输入的。(此处是假) (2.)Username=’1’ 返回假,没有用户名是1(此处是假) (3.)1=1返回真(此处是真) 以上的结果是: 假 or 真 or假 返回真。验证通过。 万能密码 asp aspx万能密码1：”or “a”=”a2： ‘)or(‘a’=’a3：or 1=1–4：’or 1=1–5：a’or’ 1=1–6：”or 1=1–7：’or’a’=’a8：”or”=”a’=’a9：’or”=’10：’or’=’or’11: 1 or ‘1’=’1’=112: 1 or ‘1’=’1’ or 1=113: ‘OR 1=1%0014: “or 1=1%0015: ‘xor16: 用户名 ’ UNION Select 1,1,1 FROM admin Where ”=’ （替换表名admin）密码 117..admin’ or ‘a’=’a 密码随便 PHP万能密码‘or 1=1/*User: somethingPass: ’ OR ‘1’=’1 jsp 万能密码1’or’1’=’1admin’ OR 1=1/*"},{"title":"burpsuit下Engagement tools 使用学习","date":"2020-08-19T13:56:00.000Z","url":"/2020/08/19/burpsuit%E4%B8%8BEngagement-tools-%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0/","tags":[["渗透测试","/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"],["burpsuit","/tags/burpsuit/"]],"categories":[["渗透测试","/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"content":"Engagement tools Search搜索输入字符串即可查找需要的字符串，相当于浏览器view-source后再Ctrl + F查找字符串。通常配合正则使用例如一些敏感的参数user pass id 等等 Find Comments 查找注释清晰看到注释 Find scripts 查找js代码该功能处理.js后缀的文件之外，页面中script标签的内容也会自动匹配出来。等同于右键看完当前页面的js逻辑后在接着Ctrl F 搜.js然后继续看代码，在Burp里相对方便得多。 Find references 查找引用匹配出页面中存在的各类链接 CSRF测试会生成一个csrf的页面，同时可以访问利用情况，见如下师傅"},{"title":"RCE命令执行/代码执行","date":"2020-08-19T13:55:00.000Z","url":"/2020/08/19/RCE%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/","tags":[["渗透测试","/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"],["RCE","/tags/RCE/"]],"categories":[["渗透测试","/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"content":"rceRCE英文全称：remote command/code execute分为远程命令执行ping和远程代码执行evel。漏洞出现的原因：没有在输入口做输入处理。我们常见的路由器、防火墙、入侵检测等设备的web管理界面上 disable_function有些时候，我们必须要禁用一些函数，来保证安全 phpinfo()功能描述：输出 PHP 环境信息以及相关的模块、WEB 环境等信息。危险等级：中 passthru()功能描述：允许执行一个外部程序并回显输出，类似于 exec()。危险等级：高 exec()功能描述：允许执行一个外部程序（如 UNIX Shell 或 CMD 命令等）。危险等级：高 system()功能描述：允许执行一个外部程序并回显输出，类似于 passthru()。危险等级：高 chroot() 功能描述：可改变当前 PHP 进程的工作根目录，仅当系统支持 CLI 模式 PHP 时才能工作，且该函数不适用于Windows 系统。 危险等级：高 scandir() 功能描述：列出指定路径中的文件和目录。 危险等级：中 chgrp() 功能描述：改变文件或目录所属的用户组。 危险等级：高 chown() 功能描述：改变文件或目录的所有者。 危险等级：高 shell_exec() 功能描述：通过 Shell 执行命令，并将执行结果作为字符串返回。 危险等级：高 proc_open() 功能描述：执行一个命令并打开文件指针用于读取以及写入。 危险等级：高 proc_get_status() 功能描述：获取使用 proc_open() 所打开进程的信息。 危险等级：高 error_log() 功能描述：将错误信息发送到指定位置（文件）。 安全备注：在某些版本的 PHP 中，可使用 error_log()绕过 PHP safe mode， 执行任意命令。 危险等级：低 ini_alter() 功能描述：是 ini_set() 函数的一个别名函数，功能与 ini_set() 相同。 具体参见ini_set()。 危险等级：高 ini_set()功能描述：可用于修改、设置 PHP 环境配置参数。危险等级：高 ini_restore()功能描述：可用于恢复 PHP 环境配置参数到其初始值。危险等级：高 dl() 功能描述：在 PHP 进行运行过程当中（而非启动时）加载一个 PHP 外部模块。 危险等级：高 pfsockopen() 功能描述：建立一个 Internet 或 UNIX 域的 socket 持久连接。 危险等级：高 syslog() 功能描述：可调用 UNIX 系统的系统层 syslog() 函数。 危险等级：中 readlink() 功能描述：返回符号连接指向的目标文件内容。 危险等级：中 symlink() 功能描述：在 UNIX 系统中建立一个符号链接。 危险等级：高 popen() 功能描述：可通过 popen() 的参数传递一条命令，并对 popen() 所打开的文件进行执行。 危险等级：高 stream_socket_server() 功能描述：建立一个 Internet 或 UNIX 服务器连接。 危险等级：中 putenv() 功能描述：用于在 PHP 运行时改变系统字符集环境。在低于 5.2.6 版本的 PHP 中，可利用该函数修改系统字符集环境后，利用 sendmail 指令发送特殊参数执行系统 SHELL 命令。 危险等级：高 禁用方法如下： 打开/etc/php.ini文件， 查找到 disable_functions ，添加需禁用的函数名，如下：phpinfo,eval,passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,fsocket,fsockopen 绕过disable_function一.系统组件绕过window com组件(php 5.4)(高版本扩展要自己添加）条件：要在php.ini中开启（如图） 利用代码，利用shell上传如下代码到目标服务器上 利用成功后的结果 彻底的解决方案是 直接删除System32目录下wshom.ocx文件 二.利用ImageMagick漏洞绕过disable_functionImageMagick是一套功能强大、稳定而且开源的工具集和开发包，可以用来读、写和处理超过89种基本格式的图片文件，如果phpinfo中看到有这个，可以尝试如下利用 利用代码如下 三.利用环境变量LD_PRELOAD来绕过php disable_function执行系统命令php的mail函数在执行过程中会默认调用系统程序/usr/sbin/sendmail，如果我们能劫持sendmail程序，再用mail函数来触发就能实现我们的目的 利用原理LD_PRELOAD是Linux系统的下一个有趣的环境变量：“它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。 可能这个不好理解，我们做一个简单的测试代码 保存如上代码为a.c，并编译为a,编译命令如下 运行a结果如下 以上程序很简单，根据判断传入的字符串是否等于”password”，得出两种不同结果。 其中用到了标准C函数strcmp函数来做比较，这是一个外部调用函数，我们来重新编写一个同名函数,代码如下(保存如下代码为b.c) 我们编译以上代码为一个动态共享库，编译命令如下 通过LD_PRELOAD来设置它能被其他调用它的程序优先加载 我们再次运行a./a bbbCorrect Password! 我们看到随意输入字符串都会显示密码正确，这说明程序在运行时优先加载了我们自己编写的程序。这也就是说如果程序在运行过程中调用了某个标准的动态链接库的函数，那么我们就有机会通过LD_PRELOAD来设置它优先加载我们自己编写的程序，实现劫持。 结合mail 函数进行实战测试那么我们来看一下sendmail函数都调用了哪些库函数，使用readelf -Ws /usr/sbin/sendmail命令来查看，我们发现sendmail函数在运行过程动态调用了很多标准库函数：!]() 构造poc思路编制我们自己的动态链接程序。 通过php的putenv来设置LD_PRELOAD，让我们的程序优先被调用。 在webshell上用mail函数发送一封邮件来触发。具体实现如下 1.编制我们自己的动态链接程序，代码如下（功能是执行mkdir test）执行编译为一个动态共享库的命令如下 代码 2.利用webshell，上传编译后的a.so到目标服务器3.通过putenv来设置LD_PRELOAD，让我们的程序优先被调用。在webshell上用mail函数发送一封邮件来触发。利用代码如下 结果如下，成功执行命令，创建文件test 四.利用pcntl_exec突破disable_functionspcntl是linux下的一个扩展，可以支持php的多线程操作。(与python结合反弹shell) pcntl_exec函数的作用是在当前进程空间执行指定程序，版本要求：PHP 4 &gt;= 4.2.0, PHP 5 利用代码如下 php7 的绕过 一把梭 (1) 首先查看phpinfo ,如果是php 7 ，直接先上面工具一把梭(2) 如果不是php7 ,那么再看disable_function 有没有遗漏的函数，毕竟是黑名单，所以很有可能没写全，可以对照这个列表来比较:dl,exec,system,passthru,popen,proc_open,pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link 利用apache绕过利用apache ，cgi mod 和 .htaccess 来绕过 （1）利用条件:phpinfo 中搜索server api 是 cgi 或者fastcgi（2）如果是cgi 模式:（3）如果是fast_cgi 模式: 使用windows 系统组件com(1)phpinfo 中 com.allow_dcom 开启什么是com 组件:COM组件是以WIN32动态链接库（DLL）或可执行文件（EXE）形式发布的可执行代码组成。 –百度百科 comshell.php : 使用遗漏函数直接利用遗漏函数 exec , shell _exec ,system ,passthru ,popen ,proc_open,pcntl_exec,imap_open.dl 来执行命令 :(1) exec (2) shell_exec (3) system (4) passthru (5) popen (6) proc_open (7) pcntl_exec:条件: 开启了pcntl 扩展，并且php 4&gt;=4.2.0 , php5 onlinux (8) imap_open() 函数: "},{"title":"攻防世界web进阶区upload详解","date":"2020-08-13T08:33:00.000Z","url":"/2020/08/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAupload%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目进入页面是我们的注册登录以后，发现可以文件上传 传完之后发现有回显，猜测可能是文件名注入我们先进行一系列得上传测试，发现都不行 这时候，御剑发来了好消息，这儿有一个include，classes的文件 我们使用burp康康有哪些过滤发现被制为了空，我们猜一猜是双写绕过 下面解除文件名字注入 1.把文件名改成 a&#39; +(selselectect conv(substr(hex(database()),1,12),16,10))+ &#39;.jpg ① 这里使用substr的原因是当数字过长的时候会变成科学计数法，所以需要分批次来获取内容②使用CONV是因为题目过滤了回显有字母的情况，如果出现了字母则后面的内容就不显示，所以需要将16进制的内容转成10进制或者我们可以使用两次hex绕过也可以 这时候返回了我们的值 我们先16进制转换为10进制，然后再转回去 数据库叫web_up 很明显有点少，我们把范围往后扩大一下a&#39; +(selselectect conv(substr(hex(database()),12,15),16,10))+ &#39;.jpg 2- 然后我们查询表名 a&#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = &#39;web_upload&#39; limit 1,1)),1,12),16,10))+&#39;.jpga&#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = &#39;web_upload&#39; limit 1,1)),13,12),16,10))+&#39;.jpga&#39;+(seleselectct+CONV(substr(hex((selselectect TABLE_NAME frfromom information_schema.TABLES where TABLE_SCHEMA = &#39;web_upload&#39; limit 1,1)),25,12),16,10))+&#39;.jpg十进制：114784820031327112615676665705 126853610566245字符拼接完成如下转自 3.然后是列名：（i_am_flag） ①s ‘+(seleselectct+CONV(substr(hex((seselectlect COLUMN_NAME frfromom information_schema.COLUMNS where TABLE_NAME = ‘hello_flag_is_here’ limit 0,1)),1,12),16,10))+’.jpg————-&gt;结果为 i_am_f ②s ‘+(seleselectct+CONV(substr(hex((seselectlect COLUMN_NAME frfromom information_schema.COLUMNS where TABLE_NAME = ‘hello_flag_is_here’ limit 0,1)),13,12),16,10))+’.jpg———–&gt;结果为 lag 4.字段内容：（!!&#x5f;&#64;&#109;&#95;&#84;&#104;&#46;&#101;&#95;&#x46;!lag） ①s ‘+(seleselectct+CONV(substr(hex((selselectect i_am_flag frfromom hello_flag_is_here limit 0,1)),1,12),16,10))+’.jpg——-&gt;结果为： !!@m ②s ‘+(seleselectct+CONV(substr(hex((selselectect i_am_flag frfromom hello_flag_is_here limit 0,1)),13,12),16,10))+’.jpg——-&gt;结果为： Th.e_F ③s ‘+(seleselectct+CONV(substr(hex((selselectect i_am_flag frfromom hello_flag_is_here limit 0,1)),25,12),16,10))+’.jpg——-&gt;结果为： !lag ②CONV（N,from_base,to_base）函数，是指将N以from_base为底的基数，转成to_base的数，例如CONV(5,10,2)，意思就是把10进制的5转成2进制 ③substr（string,start,length）—&gt;string指的是字符串，start是从什么位置开始，length是长度，返回内容为截取的字符串 在本题中，由于内容太长而导致会变成科学计数法，所以需要用截取，同时配合CONV来使用以至于不会被回显拦截。"},{"title":"攻防世界web进阶区Zhuanxv详解","date":"2020-08-13T06:10:00.000Z","url":"/2020/08/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAZhuanxv%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目提示: 详解扫描目录发现了一个list我们使用了好几个扫描工具，只有wwwscan，和webdirscan可以，（可能是我字典太菜了） 发现需要登录查看源代码发现，这里有问题，加载图片的方式很诡异试试文件读取他的cookie里有jessionid 说明他是使用JAVA写的网页那么我们尝试找找web.xml ../../WEB-INF/web.xml 有一个struts2这个是struts的工作原理，以及一些讲解apps-存放了所有Struts2的示例项目 docs-存放了所有Struts2与XWork的文档 lib-存放了所有Struts2相关的JAR文件以及Struts2运行时所依赖的JAR文件 src-存放了所有Struts2的源码，以Maven所指定的项目结构目录存放  读取struts.xmlloadimage?fileName=../../WEB-INF/classes/struts.xml 这里class里面可以看到很多class类名，尝试了一下，都可以逐个下载，点号换成正斜杠，然后再在后面加个.class就可以下载了，下载后用jd反编译class文件 发现一个看起来和登陆有关的类UserLoginAction,构造payload下载:?fileName=../../WEB-INF/classes/com/cuitctf/action/UserLoginAction.class我们使用jd-gui java反编译工具我们将文件下载，并修改为.class文件我们使用luyten反编译 截取部分有用的代码 发现还有一个userservicempl的类我们下载 找到登录的规则 是登陆语句的过滤规则,在UserDaoImpl.class中找到: 这里是大佬的盲注脚本 "},{"title":"渗透测试基础笔记","date":"2020-08-12T05:24:00.000Z","url":"/2020/08/12/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/","tags":[["渗透测试","/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"categories":[["渗透测试","/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"content":"渗透测试概念渗透测试就是一种通过模拟恶意攻击者的技术与方法，挫败目标系统安全控制措施，取得访问控制权，并发现具备业务影响后果安全隐患的一种安全测试与评估方式。 分类 黑盒测试 白盒测试 灰盒测试过程环节 前期交互阶段 情报收集阶段 威胁建模阶段 漏洞分析阶段 渗透攻击阶段 后渗透攻击阶段 报告阶段安全漏洞生命周期： 安全漏洞研究与挖掘 Exploit代码开发与测试 安全漏洞/Exploit代码限于封闭团队 安全漏洞/Exploit代码开始扩散 攻击工具/恶意程序出现并传播 Exploit/攻击工具/恶意程序大规模传播并危害互联网 Exploit/攻击工具/恶意程序逐渐消亡 安全漏洞披露方式1.完全公开披露2.负责任的公开披露3.进入地下经济链4.小范围利用直至被动披露 安全漏洞公开资源库 CNNVD: 中国国家漏洞库，由中国信息安全测评中心维护。(www.cnnvd.org.cn) CNVD: 中国国家信息安全漏洞共享平台，由国家计算机网络应急技术处理协调中心(CNCERT/CC)维护。(www.cnvd.org.cn) 乌云安全漏洞报告平台: 民间组织。已无。 SCAP中文社区: 民间组织项目。() 国外的安全漏洞信息库主要包括: CVE: (Common Vulnerability and Exposures,通过漏洞与披露)，已成为安全漏洞命名索引的业界事实标准 NVD: (National Vulnerability Database,国家漏洞数据库)，是美国官方根据NIST的SCAP标准协议所描述的安全漏洞管理信息库。 SecurityFocus OSVDBmetasploitmsf体系框架 基础库文件 模块 插件 接口 功能程序msf模块 Auxiliary 辅助模块 用于信息搜集以及一些不需要payload的攻击（如DOS） Exploits 渗透攻击模块 主动渗透攻击： 对安全漏洞主动攻击 被动渗透攻击： 对于无法主动将数据从远程输入到客户端软件中，可以诱导目标用户打开我们构造的“邪恶的”网页、电子邮件与编辑软件。 Payloads 攻击载荷模块攻击载荷是在渗透攻击成功后促使目标系统运行的一段植入代码，通常作用是为渗透攻击者打开在目标系统上的控制会话连接。 攻击载荷模块分为独立(Singles)、传输器(Stager)、传输体(Stage)三种类型。 Nops 空指令模块 用来在攻击载荷中添加空指令区，以提高攻击可靠性。 Encoders 编码器模块确保攻击载荷中不会出现渗透攻击过程中应加以避免的“坏字符”。还能对攻击载荷进行免杀处理。 典型坏字符0x00,会截断后边内容，从而使攻击载荷无法正常运行。 Post 后渗透模块 主要支持在渗透攻击取得目标系统远程控制权之后，在受控系统中进行各式各样的后渗透攻击动作，比如获取敏感信息、进一步扩展、实施跳板攻击等。 **evasion ** 5.0版本新增模块，用于免杀 msf 使用kali中自带msf。 输入msfconsole即可进入msf， 输入help可查看所支持的命令列表。 help [COMMAND]进一步查看该命令的使用帮助信息。例如help search. 信息收集testfire.net 是一个包含很多典型web漏洞的模拟银行模拟网站。 whois 域名注册信息查询 whois -h whois testfire.net nslookup 与 dig 域名查询 nslookup 与 dig 两个工具功能上类似，都可以查询域名对应的IP地址。 dig 工具可以从该域名的官方DNS服务器上的查询到精确的权威应答，而nslookup只会得到DNS解析服务器保存在Cache中的非权威应答。 使用set type=A 对其IP进行解析，set type=MX 查找邮件转发服务器。 dig @&lt;dns服务器&gt; &lt;待查询域名&gt;，可在待查询域名后边加上A、NS、MX等选项查找特定类型的DNS解析记录。 IP2Location 地理位置查询   netcraft 网站提供的信息查询服务  IP2Domain 反查域名  输入ip反查哪些域名指向同一ip. 站长之家  搜索引擎 主机探测与端口扫描活跃主机扫描 ping msf 主机发现模块 nmap操作系统辨识 端口扫描与服务类型探测msf 中端口扫描器 nmap 扫描 服务扫描与查点msf终端search name_version查找所有可用的服务查点模块。 常见网络服务扫描 Telnet 服务扫描 ssh服务扫描 数据库服务查点 开放代理探测与利用 口令猜测与嗅探 ssh 服务口令猜解 psnuffle 口令嗅探 网络漏洞扫描漏洞扫描器原理与漏洞扫描器网络漏洞扫描指的是利用一些自动化的工具来发现网络上各类主机设备的安全漏洞，这些自动化工具通常被称为漏洞扫描器。 黑盒扫描 白盒扫描 扫描器X-scanAppScanAWVSWebInspectNetsparkerWVSS安恒明鉴Nessusnexpose启明天镜RSAS 查找特定服务漏洞nmap 漏洞扫描结果分析漏洞扫描结果分析 Web 应用渗透技术OWASP TOP 10 SQL 注入攻击 跨站脚本攻击(xss) 跨站请求伪造(csrf) 会话认证管理缺陷(BASM) 安全误配置 不安全密码存储 不安全的对象参考 限制 url 访问失败 缺乏传输层保护 未验证的重定向和跳转 实例可寻找各大靶场。 内网渗透内存攻防技术内存攻击指的是攻击者利用软件安全漏洞，构造恶意输入导致软件再处理输入数据时出现非预期错误，将输入数据写入内存中的某些特定敏感位置，从而劫持软件控制流，转而执行外部输入的指令代码，造成目标系统被获取远程控制或拒绝服务。 缓冲区溢出原理：缓冲区溢出漏洞是程序由于缺乏对缓冲区边界条件检查而引起的一种异常行为，通常是程序向缓冲区中写数据，但内容超过了程序员设定的缓冲区边界，从而覆盖了相邻的内存区域，造成覆盖程序中的其他变量甚至影响控制流的敏感数据，造成程序的非预期行为。 分为栈溢出和堆溢出。 ms08_067客户端渗透攻击客户端渗透攻击指的是攻击者构造畸形数据发送给目标主机，用户在使用含有漏洞缺陷的客户端应用程序处理这些数据时，发生程序内部处理流程的错误，执行了内嵌于数据中的恶意代码，从而导致被渗透入秦。 这类攻击针对的是处于客户端一侧的软件程序，最常见的以浏览器、Office为代表的流行应用软件。 转自："},{"title":"web信息收集之搜索引擎","date":"2020-08-12T02:13:00.000Z","url":"/2020/08/12/web%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/","tags":[["信息搜集","/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"]],"categories":[["渗透测试","/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"content":"一、Google Hacking1. site功能： 搜索指定域名的网页内容，用来搜索子域名、跟此域名相关的内容。 举例： site:baidu.com 搜索baidu.com相关的网页。(索引) “web安全” site:baidu.com 搜索baidu.com跟web安全相关的网页(前后顺序没关系) site:pan.baidu.com“教程” 在百度网盘搜索教程相关的资源 2. filetype功能： 搜索指定文件类型。 举例： “web安全” filetype:pdf 搜索跟web安全书籍相关的pdf文件 nmap filetype:ppt搜索跟nmap相关的ppt 文件 site:baidu.com filetype:pdf 搜索百度网站的pdf文件 “web安全”site:baidu.com filetype:pdf 组合起来搜索 3. inurl功能： 搜索url网址存在特定关键字的网页，可以用来搜索有注入点的网站。 举例： inurl:php?id= 搜索网址中有“php?id=”的网页inurl:view.php=? 搜索网址中有“view.php=?”的网页inurl:.jsp?id= 搜索网址中有“jsp?id=”的网页inurl:.asp?id= 搜索网址中有“asp?id=”的网页inurl:/admin/login.php 搜索网址中有“/admin/login.php”的网页inurl:login 搜索网址中有“login”的网页inurl:admin site:baidu.com 搜索百度网址中含有admin的网址 4. intitle功能： 搜索标题存在特定关键字的网页。 举例： intitle:后台 搜索标题中含有”后台”的网页intitle:后台 inurl:admin 搜索url宗含有”admin”并且标题中含有”后台”的网页intitle:后台 inurl:admin filetype:php 又加了一个限制条件”后台类型为php”intitle:”index of” 搜索索引目录intitle:index of “login” 搜索登陆页面信息intitle:index of “admin” 搜索后台首页管理页面信息 5. intext功能： 搜索正文存在特定关键字的网页。 举例： intext:powered by Discuz 搜索Discuz论坛相关的页面intext:powered by wordpress 搜索wordpress制作的博客网站intest:powered by CMS 搜索CMS相关的页面indext:powered by xxx inurl:login 搜索此类网址的后台登陆页面 6. 符号 -keyword 强制结果不要出现次关键字，例如：电影 -黑客*keyword 模糊搜索，强制结果包含此关键词，例如：电影 黑客“keyword” 强制搜索结果出现此关键词，例如：书籍 “黑客”~keyword 同时搜索同义词，例如：collega、university site:csdn.net “sql注入” -测试 2019..2020搜索csdn上2019-2020年关于”sql注入”并且排除”测试”的网页 二、Shodan Hacking Shodan (撒旦搜索引擎) 是由web工程师 John Mather (马瑟利) 编写的，被称为“最可怕的搜索引擎”，可扫描一切联网的设备。除了常见的web服务器，还能扫描防火墙、交换机、摄像头、打印机等一切联网设备。 1. ip 114.114.114.114 2. service/protocol httphttp country:”DE”http country:”DE” product:”Apache httpd”http product:”Apache httpd” sshssh default passwordssh default passwiird country:”JP” 3. keyword基于关键词搜索的思路是根据banner信息(设备指纹)来搜索 “default password” country:”TH”FTP anon successful # ftp匿名用户访问 4. country country:cncountry:us 5. product product:”Nicrosoft IIS httpd”product:”nginx”product:”Apache httpd”product:MYSQL 6. version product:MySQL version:”5.1.73”product:”Microsoft IIS httpd” version:”7.5” 7. hostname hostname:.orghostname:.edu 8. os os:”Windows Server 2008 R2”os:”Windows 7 or 8”os:”Linux 2.6.x” 9. net net:110.180.13.0/24200 ok net:110.180.13.0/24200 ok country:JP net:110.180.13.0/24 10. port port:22port:3389 11. 综合案例 搜索日本区开启80端口的设备：country:jp port:80country:jp port:80 product:”Apache httpd”country:jp port:80 product:”Apache httpd” city:”Tokyo”country:jp port:80 product:”Apache httpd” city:”Tokyo” os:”Linux 3.x” 搜索日本区使用Linux2.6x系统的设备：country:jp os:”Linux 2.6.x”country:jp os:”Linux 2.6.x” port:80country:jp os:”Linux 2.6.x” port:80 product:”Apache httpd” 搜索日本区使用Windows Server 系统的设备：country:jp os:”Windows Server 2008 R2”country:jp os:”Windows Server 2003” port:445country:jp os:”Windows Server 2003” port:80 搜索日本区使用Microsoft IIS 的设备：country:jp product:”Microsoft IIS httpd” version:”7.5” 三、 Zoomeye Hacking Zoomeye (钟馗之眼) 是一个现面向网络空间的搜索引擎，”国产的Shodan”,由创宇出品。 iposappserviceportproductcountryvercidrhostnamesitetitleheaderkeywordsdesc 快捷帮助：显示该帮助 shift + /隐藏该帮助 ESC回到首页 shift + h高级搜索 shift + s聚焦搜索框 s 搜索手册：  四、fofaFOFA是白帽汇推出的一款网络空间搜索引擎，它通过进行网络空间测绘，能够帮助研究人员或者企业迅速进行网络资产匹配，例如进行漏洞影响范围分析、应用分布统计、应用流行度排名统计等。 官网： 官方文档： 下面是FOFA的一些简单使用案例： 注意：FOFA搜索关键词不区分大小写 查询语法： title=”abc” 从标题中搜索abc。例：标题中有北京的网站header=”abc” 从http头中搜索abc。例：jboss服务器body=”abc” 从html正文中搜索abc。例：正文包含Hacked bydomain=”qq.com” 搜索根域名带有qq.com的网站。例： 根域名是qq.com的网站host=”.gov.cn” 从url中搜索.gov.cn,注意搜索要用host作为名称。例： 政府网站, 教育网站port=”443” 查找对应443端口的资产。例： 查找对应443端口的资产ip=”1.1.1.1” 从ip中搜索包含1.1.1.1的网站,注意搜索要用ip作为名称。例： 查询IP为220.181.111.1的网站; 如果想要查询网段，可以是：ip=”220.181.111.1/24”，例如查询IP为220.181.111.1的C网段资产protocol=”https” 搜索指定协议类型(在开启端口扫描的情况下有效)。例： 查询https协议资产city=”Hangzhou” 搜索指定城市的资产。例： 搜索指定城市的资产region=”Zhejiang” 搜索指定行政区的资产。例： 搜索指定行政区的资产country=”CN” 搜索指定国家(编码)的资产。例： 搜索指定国家(编码)的资产cert=”google” 搜索证书(https或者imaps等)中带有google的资产。例： 搜索证书(https或者imaps等)中带有google的资产banner=users &amp;&amp; protocol=ftp 搜索FTP协议中带有users文本的资产。例： 搜索FTP协议中带有users文本的资产type=service 搜索所有协议资产，支持subdomain和service两种。例： 搜索所有协议资产os=windows 搜索Windows资产。例： 搜索Windows资产server==”Microsoft-IIS/7.5” 搜索IIS 7.5服务器。例： 搜索IIS 7.5服务器app=”海康威视-视频监控” 搜索海康威视设备，更多app规则。例： 搜索海康威视设备after=”2017” &amp;&amp; before=”2017-10-01” 时间范围段搜索。例： 时间范围段搜索，注意： after是大于并且等于，before是小于，这里 after=”2017” 就是日期大于并且等于 2017-01-01 的数据，而 before=”2017-10-01” 则是小于 2017-10-01 的数据asn=”19551” 搜索指定asn的资产。例： 搜索指定asn的资产org=”Amazon.com, Inc.” 搜索指定org(组织)的资产。例： 搜索指定org(组织)的资产base_protocol=”udp” 搜索指定udp协议的资产。例： 搜索指定udp协议的资产is_ipv6=true 搜索ipv6的资产,只接受true和false。例： 搜索ipv6的资产is_domain=true 搜索域名的资产,只接受true和false。例： 搜索域名的资产ip_ports=”80,443” 或者 ports=”80,443” 搜索同时开放80和443端口的ip资产(以ip为单位的资产数据)。例： 搜索同时开放80和443端口的ipip_ports==”80,443” 或者 ports==”80,443” 搜索同时开放80和443端口的ip资产(以ip为单位的资产数据)。例： 搜索只开放80和443端口的ipip_country=”CN” 搜索中国的ip资产(以ip为单位的资产数据)。例： 搜索中国的ip资产ip_region=”Zhejiang” 搜索指定行政区的ip资产(以ip为单位的资产数据)。例： 搜索指定行政区的资产ip_city=”Hangzhou” 搜索指定城市的ip资产(以ip为单位的资产数据)。例： 搜索指定城市的资产ip_after=”2019-01-01” 搜索2019-01-01以后的ip资产(以ip为单位的资产数据)。例： 搜索2019-01-01以后的ip资产ip_before=”2019-01-01” 搜索2019-01-01以前的ip资产(以ip为单位的资产数据)。例： 搜索2019-01-01以前的ip资产 高级搜索：可以使用括号 和 &amp;&amp; || !=等符号，如title=”powered by” &amp;&amp; title!=discuztitle!=”powered by” &amp;&amp; body=discuz( body=”content=&quot;WordPress” || (header=”X-Pingback” &amp;&amp; header=”/xmlrpc.php” &amp;&amp; body=”/wp-includes/“) ) &amp;&amp; host=”gov.cn”新增加==完全匹配的符号，可以加快搜索速度，比如查找qq.com所有host，可以是domain==”qq.com” 以上转自： godeye"},{"title":"攻防世界web进阶区comment详解","date":"2020-08-11T10:23:00.000Z","url":"/2020/08/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAcomment%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 详解只要我们输入任何一个评论，他就会让我们进行登录，我们可以通过他的文字提示，发现少了三位，一般我们都会上数字我们发现他666的时候有一个302的跳转登录以后，感觉也没有什么可以注入的正常也没有回显，这时候，我们的御剑传来了好消息有个.git,应该是git源码泄露。使用githack 下载源代码。 哦~这里提示，他的git跑路了，所以他这个源码下载的不全！我们找到大佬的修复脚本将commit补上这里涉及到git修复我们使用大佬脚本修复的时候，记得使用linux进行，win亲测不行 见这里：执行这一条命令我们执行这一条，后面的是复制上面commit的第一个内容执行完之后的效果，和第一副图就有了区别我们的代码就全了 这里很明显u才能在二次注入，他并没有对信息做出任何处理但是这里有一个坑 #只能注释同一行，这里需要注释/**/来进行两行的注释这是我们最后的语句 在CATEGORY“处存入我们的恶意payload的前部分在评论处补充后半部分发现有一个ctf的数据库首先常规的读文件payload:123&#39;,content=(select( load_file(&#39;/etc/passwd&#39;))),/*根据bash我们进行读取文件www用户，读取他的history文件，里面存着他所有的命令构造123’,content=(select (load_file(‘/home/www/.bash_history’))),/*得到 history命令说明原本/tmp/html/目录下有个.DS_Store文件。那么读取他payload:123&#39;,content=(select (load_file(&#39;/tmp/html/.DS_Store&#39;))),/*发现读不全我们进行编码一下长度不够，那么hex编码一下。 payload:123&#39;,content=(select hex(load_file(&#39;/tmp/html/.DS_Store&#39;))),/*得到 发现了一个flagflag_8946e1ff1ee3e40f.php我们读取这个文件试试这个文件是从/tmp/html目录中copy过来的，我们回到/var/www/html中读取flag。不过发现并没有读取成功。想了一下，可能是因为文件过大。继续用hex编码，成功得到flag. payload： 123’,content=(select hex(load_file(‘/var/www/html/flag_8946e1ff1ee3e40f.php’))),/* 得到： 解码得到这里也可以直接在/tmp/html目录读取,但是tmp有时会自动清除。 tmp目录解出来的不一样，是个坑 cp： .DS_Store"},{"title":"攻防世界web进阶区Web_php_wrong_nginx_config详解","date":"2020-08-11T08:03:00.000Z","url":"/2020/08/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAWeb-php-wrong-nginx-config%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目打开发现无论我们输入什么他都会弹出网站建设不完全 那么我们使用御剑进行扫描，扫描到了admin和robots.txt我们访问admin试试 我们接着访问hint.php 和Hack.php 这个打开直接弹窗 详解好嘞，我们正式开搞！发现这里有一个cookie为0的值，我们改为1发现成功登录 进去瞎点一通，发现，只有管理中心可以改变url 我们试试文件包含../ 无论我们加入多少../均不能，猜测是过滤了我们在正常的url中加入../ ./ /测试发现只有加../和原页面一致，说明他过滤了../而且还是置为空那么我们就可以进行双写绕过/admin/admin.php?file=./..././..././..././..././etc/passwd&amp;ext=成功包含。ext一定不要写东西，因为他是一个后缀，如果写入php,的话，他会按照php进行打开根据hint.php提示包含配置文件。 发现倒数几行location /web-img开启了目录浏览 autoindex on;. 那么我们进行访问。/web-img/alias用法 也就是说 alias 会丢弃掉 location 的路径因此 alias 后面的路径是从系统根目录开始的发现hack.php.bak下载好发现，如下 这是一个后门页面，网上有师傅们的源码php混淆后门我们这儿只有一个F,输出看看，整理一下 我们找大佬的脚本测试一下php混淆后门 成功执行命令， "},{"title":"攻防世界web进阶区i-got-id-200超详解","date":"2020-08-10T02:41:00.000Z","url":"/2020/08/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAi-got-id-200%E8%B6%85%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目提示：嗯刚建了一个网站打开网页发现三个可以点击的file处存在文件上传 form处存在xss 详解.pl结尾的都是perl编写的网页文件这里上传文件会直接进行展示，到这里就没了= =只能看看师傅们的wp师傅们猜测这里后台perl上传代码使用了param(）函数 这里附上网上大佬们猜测的后台代码 首先bp抓包，我们新增一条 我们盲猜一手，file.pl存在于var/www下使用perl的那个漏洞（大佬的）发现果然查看到了文件和大佬们猜测的不错 我们利用bash命令，进行RCE我们在kali里面试试语句，发现莫得问题 %20是空格，不可以用加号代替，如果在hackbar可以省略不使用，直接空格即可(讲解如下)直接ls是不行的 直接读取flag即可这个地方是读取目录的../ param() param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的接收变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的: 漏洞分析这里大佬告诉我们要利用@ARGV这个全局变量 首先要了解Perl中的ARGV全局特殊文件句柄ARGV：遍历数组变量@ARGV中所有文件名的特殊文件句柄@ARGV：是个全局数组特殊变量，传给脚本的命令行参数列表 Perl 会将 perl 命令行参数列表放入到数组 @ARGV 中，而默认情况下，这些命令行参数是 Perl 的数据输入源，也就是 说Perl 会以依次将他们当作文件进行读取。这里可以参考C语言的argv{}数组，但不同的是，Perl语言的@ARGV中的第一个变量就是参数，而不是文件名。Param() 函数会返回一个列表，但只有第一个文件会被放到变量中。 增加新的上传项，并删除filename，重大漏洞来了 删除filename后， $file的值（也就是文件名）变为了上传的内容，而输出的文件内容为空 通俗理解就是，新加入的文件内容替换了filename参数，传给了$file变量，&lt;file&gt;句柄中打开文件内容为空 那如果我们利用@ARGV，将$file替换为@ARGV，其句柄就是，就是命令行的参数呀，如果给的参数是文件名，就可以输出第一个文件名的所有内容。这里我们利用以上信息构造，加入新的文件列表，删除filename，文件内容写入ARGV 那么后端执行，就会把$file的值换为ARGV，也就成了上述test.pl的内容，会把从命令行里读取到的参数，当作文件路径找到并输出。 那么如何传入命令行参数呢？其实直接在url给出参数就相当于命令行传参那么，通过ARGV和url的参数就可以达到读取服务器上任意文件的目的 构造远程执行代码这里空格需要用url编码转义，否则不符合http头部格式，不能随便加空格的 Linux中，/bin/bash 是bash解释器，这句话当作文件名时，首先会去寻找/bin/bash并且输出，那就是执行了解释器的功能 bash -c 的语法是，后面跟的第一个参数会当作命令来被bash解析，第二，第三个参数被认为是bash的参数，而不是第一个参数（命令）的参数举个例子： 会执行ls命令，列出当前目录，/会被当做bash的参数，没有意义，会找不到 如果我们想要列出根目录需要 “ls /”时，需要加入$IFS IFS是linux的特殊变量，默认值是space空格， $是取变量值，$IFS就代表空格就可以执行“ls /“的命令了 若只有 /bin/bash%20-c%20ls$IFS/ 命令会发现没有返回信息 因为，/etc/passwd本身就是文件，后端代码找到并输出返回在html标签中 而/bin/bash 一旦被访问输出，就是bash运行环境，整个语句的输出结果在shell的缓冲区里，也就是后台服务器才能看到，并不会输出到html标签中。在linux里我们只需要管道操作就可以指定结果的存放位置了。Tips：Perl open()函数会默认打开一个管道！这里利用Perl open()函数打开的管道，进行劫持，通过“|“操作符，把内容引入open()函数已经打开的管道中，就可以输出到html标签中啦！ 部分转自："},{"title":"攻防世界web进阶区unfinish详解","date":"2020-08-09T13:59:00.000Z","url":"/2020/08/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAunfinish%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 详解我们使用御剑，扫描一波 我们进入注册页面查看，发现这个，有注册的话猜一下二次注入（这里注入，然后去页面看结果） 我们先拿AWVS试试，哦~我的上帝，它存在注入我们试试，burp的fuzz看看他过滤了什么还是过滤了蛮多的这些是都没过滤的 既然知道了他是sql注入那么我们为啥不用sqlmap呢我们使用sqlmap，发现只能知道这里有注入点，但是过滤很严重我们需要找找合适的tamper哦~我的上帝，果然不行，看来还得看看师傅们怎么写的 我们推测这里的语句是 insert into tables value(&#39;$email&#39;,&#39;$username&#39;,&#39;$passwpord&#39;);登录成功后语句： SELECT * FROM tables WHERE email = &#39;&#39;$email&quot;;他这里注册的时候作了限制，所以联合查询这种方法不能用。 那么尝试在注册时用户名处进行闭合。 用户名处构造group_concat(1,database()),database&#39;,&#39;1&#39;)# 结果返回 nnnnoooo!!!有过滤， 被过滤就是这样子 用户名注册时加个单引号注册失败，双引号注册成功，说明可能为单引号闭合·， 注册一个。 email: 123@123.comusername: 1&#39; and &#39;0password: 123登陆发现，用户名处回显0 说明存在注入，and运算结果为0. 下面节选自 与其他编程语言不同，MySQL中，+(加号)只有一个功能：运算符。 如果加号运算中有字符，那么mysql就会把字符转变为数字在相加，比如select ‘1’+’1a’;结果为2，转换过程跟php类似。 下面看几个例子。 可以用截取的方法，截取处每一位，然后ascii编码。 成功截取，但是逗号被过滤，该咋办。使用from...for...代替。 还有可以使用十六进制转换后运算有疑问，为啥不用二进制或者八进制。用例子来说明： 可以看到，只有十六进制成功转换。但是又出来一个问题，如果十六进制转换后的字符串有字母的话，转化为数字就会相加就会丢失字符。 又但是当这个长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度。 这里还可以使用分段读法。 抄大佬的脚本 题目真的越来越难了，没有wp寸步难行唉，太菜了"},{"title":"攻防世界web进阶区ics-07详解","date":"2020-08-07T15:54:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAics-07%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目当然又是熟悉的界面，熟悉的ics题目，熟悉的只能点击一个页面 详解这里进来有一个view-source点击看看是一堆代码。我们进行尝试审计 page不能为空，同时，他的值不能等于index.php这样，就会包含flag.php文件否则重定向到flag.php这个文件 我们来看第二块儿判断session的是不是admin，然后获取到一些值，匹配.php3457,pht,phtml如果匹配到，那么就结束如果没有匹配到，那么就写入文件 这里判断id是否存在，floatval这里用的!==，所以类型也要比较，后变为字符串string，前面为数值float,所以肯定不相等。substr用来返回子串然后进行数据库的查询，并且进行了转义 第一段是个简单重定向，get参数page不为index.php即可 第二段 需要得到一个admin的session，之后可以post传入con与file两个参数File参数是自定义的文件名字，之后会处理为backup/文件名这里对文件名进行了过滤，防止后缀名是php的文件。上传成功后，会切换到uploaded目录，创建文件，并将con的内容写入，那么实际文件的路径就是：uploaded/backup/xxx.xxx 第三段代码是对get参数id进行校验，如果id的浮点数不是1，且最后一位是9那么，实行查询语句，如果查询正确，会得到一个admin的session 因此我们这里就需要满足所有需求我们查询id的时候，发现有了admin的session?page=flag.php&amp;id=1xx9这里因为只要他的最后一位是9即可进行绕过这里同时利用了php的弱类型相等，因此可以进行查询语句 我们就可以进行上传木马了因为他过滤很严格，我们只能进行解析漏洞00截断啊，之类的我们发现这里上传的并没有存进来，必须通过网页来上传，因为那里有者sessionapache2.x的解析漏洞1.php.xxx会被当作php来解析，那么我当时上传的时候，并没有能够成功，我们换另一种上传方式其中 .. 代表当前目录的父目录 , .代表当前目录，所以这里的c.php/b.php/..也就是访问b.php的父目录，也就是 c.php 但是我这里死活连不上，只能这样来表示可以了吧我们上传可以往父级目录上传，我估计他可能父级目录可以进行操作 floatval他只留下了数字 substr"},{"title":"攻防世界web进阶区bug详解","date":"2020-08-07T15:53:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAbug%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法我们直接打开就是一个页面，登录页面，当我们尝试注册的时候，发现，用户已经存在我们对他所有的页面都进行sqlmap的扫描，并没有发现可以注入的点因为他这里之前注册时候发现存在admin的账户，我们尝试一下，这里功能很多，那么我们试试直接修改admin的账户密码试试我们在他修改密码的地方，尝试修改名字发现成功，我们登录admin的账号试试 其实我们发现还是不能登录，只是名字改为了admin，并没有他的权限，最多有了他的信息我们尝试上一次使用的xff修改成功登录，说明他这里限制了本地ip查看源码，发现了隐藏语句直接访问肯定不可以，他说了，filemanage，我们猜测，这几个问号是什么无非就是change，upload，stastic，果然有upload可以进去开始我们的上传之路正常上传发现可以写入一句话，发现他认出了我们是php所以他开启了内容的检测文件头依旧不可以绕过我们放出大招，果然，文件内容可以进行绕过了，现在是文件后缀的绕过直到我们输入php4，发现终于可以绕过了 同时我们获得了flag"},{"title":"攻防世界web进阶区Cat详解","date":"2020-08-07T15:52:00.000Z","url":"/2020/08/07/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BACat%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目但是我们输入一个链接的时候发现没有回显这是我们访问loli.club的页面我们输入ip地址，发现有回显 详解至此，我们猜测是一个代码执行的考点我们尝试127.0.0.1||ls127.0.0.1&amp;&amp;ls127.0.0.1|ls均被过滤 我们发现他的url处存在编码，url编码我们进行尝试发现，url编码为%80时报错，因为ASCII码的编码范围0-127%80相当于128 所以推断是由unicode解码失败导致的， 在比赛的时候有个提示： RTFM of PHP CURL===&gt;&gt;read the fuck manul of PHP CURL??? 我们可以看到，他是POST方式，同时有着Django的模板根据大佬的教学 可以使用at为前缀并使用完整路径我们根据django的目录，可以从配置文件settings.py的报错中看看有没有database的相关信息?url=@/opt/api/api/settings.py我们找到他是一个sqlite3数据库我们看看他的内容"},{"title":"攻防世界web进阶区ics-04详解","date":"2020-08-06T16:53:00.000Z","url":"/2020/08/07/ics-05/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["CTF","/tags/CTF/"],["WEB","/tags/WEB/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目打开环境，发现就一个登录和注册功能可以用。还有一个用户找回密码功能。 详解我们发现有三个入口注册，登录，找回密码我们使用sqlmap扫描，发现只有找回密码可以进行sql注入python2 sqlmap.py -r -batch --dbscert中只有一个表 user我们看他字段 登录成功获取flag当然，这是在可以获取到密码的情况 实际上我们并不能一定可以解决 那么我们可以进行重复注册我们尝试去覆盖他的原来的账号密码，发现也是可以登陆的"},{"title":"攻防世界web进阶区FlatScience详解","date":"2020-08-06T15:57:00.000Z","url":"/2020/08/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAFlatScience%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["CTF","/tags/CTF/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法我们一个一个点进去发现也就是一些论文之类的我们御剑发现了一些东西robots。txt我们登录试试在login页面有报错，我们猜测是sql注入他的源码中写到，登录是你不可能绕过的这里源码中出现了？debug，可能是一个调试页面，我们访问看看 判定POST提交的usr和pw是否存在，很显然usr处存在注入这里提醒是sqlite数据库 tips： 我们使用sqlmap进行尝试可见，存在注入但是并没有跑出来，可能是我的网速问题这里我们知道了他的数据库是sqlite那么我们进行手工注入1’ –+,不报错，说明闭合方式确定了。 1&#39; order by 3 --+报错，1&#39; order by 2 --+不报错，说明字段是2， 这里我们看到有回显了 我们查询到了他的数据库，发现有hint这个选项进去看看看这里查到，需要他的论文，我们查询一下其他的列 我们猜测，他的密码应该和pdf有关使用网上的脚本python3爬取多目标网页PDF文件并下载到指定目录： 得到admin的密码为ThinJerboa"},{"title":"攻防世界web进阶区ics-05","date":"2020-08-06T09:17:00.000Z","url":"/2020/08/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAics-05/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目我们只能点击一个地方 解法御剑扫描有一个css的文件没有什么作用发现又点了一次的时候，url发生了改变 因为是php的页面，我们试试php伪协议读取文件 这是我们解密出来的文件内容发现了一个输入的函数他如果是字母和数字组合的话，输出page内容，同时die掉如果不是字母和数字的组合的话，走如下的elsepage中不能存在input，ta：text，text，而且不能是在page的开头处存在，否则就die掉如果page中包含index。php,那就输出ok，然后包含page这个文件 最后还有一个内部人员的测试版本，如果要从内部访问的话，其实本地的命令执行就可以进行使用这个函数首先伪造xff pattern，replacement，subject，同时有值的话preg_replace，搜索subject中 pattern的字符串，同时替换为replacement 也就是说pattern参数的结尾包含了/e修正符的话,如果replacement构成合法的代码的话便会执行 我们使用插件，成功的模拟了本地访问我们来一波Rce要注意字符串两个相匹配?pat=/heihei/e&amp;rep=system(&#39;ls /var/www/html&#39;)&amp;sub=heihei我们使用一下find命令?pat=/heihei/e&amp;rep=system(&#39;find -name *flag*&#39;)&amp;sub=heihei preg_replace ctype_alnum strpos查询某个字符串在某个字符串中第一次出现的位置 X-Forwarded-ForIP伪造 TCP/IP层面的IP伪造很难实现，因为更改后很难实现正常的TCP通信，但在HTTP层面的伪造就显得很容易。可以通过伪造XFF头进行IP伪造 XFF字段 X-Forwarded-For(XFF)是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。通俗来说，就是浏览器访问网站的IP。一般格式： X-Forwarded-For: client1, proxy1, proxy2, proxy3左边第一个是浏览器IP，依次往右为第一个代理服务器IP,第二个，第三个（使用逗号+空格进行分割） 伪造方式 可以通过专门的抓包改包工具或者浏览器插件或者使用脚本语言构造headers参数使用X-Fordward-For 火狐插件即可"},{"title":"xss-labs详解（下）11-20","date":"2020-08-04T16:39:00.000Z","url":"/2020/08/05/xss-labs%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%8911-20/","tags":[["XSS-Labs","/tags/XSS-Labs/"]],"categories":[["XSS-Labs","/categories/XSS-Labs/"]],"content":"Level 11查看一波源代码，发现可能在这里存在xss那么我们使用burp抓包,修改 果不其然他是把上一关的链接加上了 Level 12我们先看一下源代码这次他的值明显就是useragent的内容了 这个$_SERVER[‘HTTP_USER_AGENT’]就是来获取的 Level 13看源代码觉得和10关很相似，我们全部自己构造参数试试构造普通一句话只有这里有回显第一个是refer第二个是useragant猜测这个就是cookie的xss了 Level 14 我们查询一下，需要访问这个网页，我们使用某种不存在的东西，访问一下可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。 将XSS写到Exif里（PowerExif）exif是PHP拓展，如果要用exif_read_data函数要记得开启拓展。这是使用demo ==linux系统使用exiftool工具，进行修改。windows系统直接使用鼠标右键进入属性页面直接修改。==在配置文件php.ini中找到php_exif.dll将其加载顺序替换到php_mbstring.dll的后面，重启Apache打开页面进行读取，弹窗成功这个网站可以修改 Level 15 被墙了我们换一个 ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。 可以看到我们提交的参数src的值被插入到了标签的class属性值中，但是前面还有ng-include这样的字符。 ng-include是angular js中的东西，其作用相当于php的include函数。这里就是将1.png这个文件给包含进来我们这么构造 就相当于访问了一次level1，同时让1执行了xss ng-include1.ng-include,如果单纯指定地址，必须要加引号2.ng-include,加载外部html，script标签中的内容不执行3.ng-include,加载外部html中含有style标签样式可以识别 1，ng-include指令用于包含外部的HTML文件。 2，包含的内容将作为指定元素的子节点。 3，ng-include属性的值可以是一个表达式，返回一个文件名。 4，某种情况下，包含的文件需要包含在同一个域名下。 onerror Level 16经典一句话，基本都被过滤了，发现scrip和/被编码为&amp;nbsp;因为这里把空格都编码了，也就意味着我们无法通过空间来将字符分隔进行语义的区分，不过我们还可以用回车来将它们分开。而且这里将/符号也编码了，所以我们需要的是一个不需要封闭的标签，在一开始之前用过的 可以用回车的URL编码格式％0a来表示。当然％0d也可以。 可以看到关键字script以及/符号，空格都被替换成相同的空间字符实体了。这样也没办法去封闭前面的标签了。 Level 17 他有两个参数，我们都来一句话看看发现过滤了括号他这里提示了xsf，是一个flash攻击它本身的src并没有引号，所以我们直接输入即可火狐没有flash，我们来chrome但是谷歌把xss防住了 直接使用onclick或者onmouseover即可 Level 1818关同17关 Level 19因为chrome和fire都不让flash运行，我们只能打开iesrc的值使用双引号括起来的这里有师傅的具体操作 href=&quot;javascript:alert(/xss/)&quot;&gt;xss&lt;/a&gt; Level 20level20 仍然是flash的xss一片空白的20关师傅的博客 这关确实没思路了可以试试flash xss扫描工具"},{"title":"攻防世界web进阶区web2详解","date":"2020-08-04T10:57:00.000Z","url":"/2020/08/04/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BAweb2%E8%AF%A6%E8%A7%A3/","tags":[["攻防世界","/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"],["web进阶区","/tags/web%E8%BF%9B%E9%98%B6%E5%8C%BA/"]],"categories":[["CTF","/categories/CTF/"]],"content":"题目 解法 我们这里来审计一波for循环，从0到循环到字符串长度从$_o开始之后$_0长度的字符开始寻找，长度为1的输出给了$_c php脚本如下 strrev函数反转字符串 substr从第六位开始，返回之后的值 ord返回第一个字母的ASCII chr()从指定的ascii值返回字符4的十进制ascii是52 str_rot13()一种编码解码函数对字符串执行 ROT13 转换,ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。"},{"title":"xss-labs详解(上)1-10","date":"2020-08-03T02:26:00.000Z","url":"/2020/08/03/first-post/","categories":[["XSS-Labs","/categories/XSS-Labs/"]],"content":"Level 1源码 最基本的，我们直接插入语句&lt;script&gt;alert(1)&lt;/script&gt; Level 2 这些被预编译了这里我们看到还有一个submit，他是input的弹窗，我们在这里进行闭合 源码也可以看到，input的标签，并没有过滤，&quot;&gt; &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; //我们闭合前面， 注释后面，完成！ htmlspecialchars把预定义的字符 “&lt;” （小于）和 “&gt;” （大于）转换为 HTML 实体：实体化函数，也是一种预编译的函数，相当于&lt;&gt;不起作用了 Level 3 正常输入并不可以，我们进行代码审计使用了两次 htmlspecialchars而我们的htmlspecialchars 默认不对&#39;生效正好这里的value是&#39;闭合的我们看到这儿，value也闭合了，onlick也闭合了，只要点击value空白处，就能触发&#39; onclick=&#39;javascript:alert(/xss/)&#39;onclick=&#39;alert(/xss/) &#39; onmouseover=&#39;javascript:alert(/xss/)&#39;onmouseover=&#39;alert(/xss/)这两个都可以 JavaScript伪协议伪协议不同于因特网上所真实存在的协议，如http://，https://，ftp://， 而是为关联应用程序而使用的.如:tencent://(关联QQ)，data:(用base64编码来在浏览器端输出二进制文件)，还有就是javascript: 我们可以在浏览地址栏里输入”javascript:alert(‘JS!’);”，点转到后会发现，实际上是把javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面。 Level 4 他这里只是把尖括号替换为了空我们上我们的经典语句发现了转义，他把尖括号转义了但是这里并没有进行过滤我们直接构造闭合value即可 Level 5一套经典操作过后，发现，单引号没有被转义发现第一个script被过滤了一点那么我们再试试onclick发现onclick也是那么我们只能把input的标签闭合，然后在定义新的一个没有on的语句&quot;&gt; &lt;a href=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt; 我们来查看一下源代码将script和on都替换了 Level 6同样一套灌下去，发现单引号并没有，然后script被过滤了我们使用第五关的代码，发现href也被过滤了因为str_replace是区分大小写的那么我们把script或者href大写区分一下就好了 查看一下源码，他增添了几个过滤 Level 7经典语句之后，发现，被置为了空，那么我们双写绕过发现可以，那么我们闭合之前的括号即可&quot;&gt;&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt; Level 8标准一把梭，发现增加了友情链接发现被禁了，同时将script给过滤了我们测试又发现，onclick和jaavascript过滤了基本都被过滤了，那么我们试试实体化编码绕过就是将他编译过后的在存储进去，那么我们最终显示出来的就是我们需要的代码可以看看这里的解释这里我们将他实体化，这是在线网站：(1) strtolower将所有变为小写，防止大小写绕过 Level 9经典一句话，发现他说不合法，那么猜一手匹配相应字符哦~第八关的实体化代码输入不进去那么我们猜一猜匹配的字符是什么网址的话猜一下http://发现我们的链接存在了，那么我们将上一关的代码补上注意一定要将他http：//注释掉 看代码，果然是匹配了http:// Level 10第十个，打开只有一张图片，那么猜一下应该是从图片入手看源代码，发现了三个隐藏的input框我们把他隐藏的hidden删掉没有发送按键，那只能在hackbar直接构造了我们把所有的参数都改成我们的一句话，冲冲冲！我们发现只有第三个有回显，和之前的很像，而且她过滤了括号我们猜测使用javascript伪协议 实体化也没能绕过说明他源代码并没有进行实体化，那么我们考虑考虑直接xss发现也不可以，我们把type删掉，然后点击空白框即可&amp;t_sort=&quot; onclick= &quot;alert(/xss/) 将尖括号屏蔽了，其他没有什么，"}]